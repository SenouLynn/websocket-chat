{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\Senou Lynn\\\\code\\\\projects\\\\chat-app-websocket\\\\webSocketClient\\\\src\\\\App.js\",\n    _s = $RefreshSig$();\n\n//Dependencies//\nimport React from \"react\";\nimport { client, w3cwebsocket as W3CWebSocket } from \"websocket\";\nimport { useEffect, useState, useRef } from \"react\"; //Some bullshit from Ant Designs\n\nimport { Card, Avatar, Input, Typography } from \"antd\";\nimport \"antd/dist/antd.css\";\nimport \"./index.css\";\nconst {\n  Search\n} = Input;\nconst {\n  Text\n} = Typography;\nconst {\n  Meta\n} = Card; //Components//\n\nimport Home from \"./Home\";\nimport Login from \"./Login\"; //Define socket\n\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst socketClient = new W3CWebSocket(\"ws://localhost:8000/\");\nexport default function App() {\n  _s();\n\n  //Dont' let anything happen until websocket connection is made\n  let [isOpen, setIsOpen] = useState(false); //Authentication State\n\n  let [userState, setUserState] = useState({\n    \"userName\": \"\",\n    \"isLoggedIn\": false\n  });\n  let [messages, setMessages] = useState([]);\n  useEffect(() => {\n    //Open up connection\n    socketClient.onopen = () => {\n      console.log(\"Websocket Client Connected\");\n      setIsOpen(true);\n    };\n\n    socketClient.onmessage = message => {\n      const dataFromServer = JSON.parse(message.data);\n      console.log(\"Reply from Server: \", dataFromServer);\n\n      if (dataFromServer.type === \"message\") {\n        console.log(\"datafromServer msg and user: \", dataFromServer.msg, dataFromServer.user);\n        let incomingMessage = {\n          \"msg\": dataFromServer.msg,\n          \"user\": dataFromServer.user\n        };\n        updateMessages(incomingMessage);\n        console.log(\" Message State:\", messages);\n      }\n    };\n  });\n\n  function updateMessages(incomingMessage) {\n    let newMessage = messages.push(incomingMessage);\n    setMessages(newMessage);\n  } //<--- Conditionally Render Components--->//\n\n\n  let loginComponent;\n  userState.isLoggedIn === false ? // loginComponent = <Login />\n  loginComponent = /*#__PURE__*/_jsxDEV(\"div\", {\n    children: /*#__PURE__*/_jsxDEV(Search, {\n      placeholder: \"Enter Username\",\n      enterButton: \"Go Forth\",\n      size: \"large\",\n      onSearch: value => setUserState({\n        userName: value,\n        isLoggedIn: true,\n        messages: []\n      })\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 75,\n      columnNumber: 11\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 74,\n    columnNumber: 9\n  }, this) : loginComponent = /*#__PURE__*/_jsxDEV(Home, {\n    userName: userState.userName,\n    isSocketOpen: isOpen\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 86,\n    columnNumber: 9\n  }, this);\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: [/*#__PURE__*/_jsxDEV(\"h4\", {\n      children: \"Home\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 90,\n      columnNumber: 7\n    }, this), loginComponent]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 89,\n    columnNumber: 5\n  }, this);\n}\n\n_s(App, \"34QsNk1XEGrfqN/1324PA4ISd2Q=\");\n\n_c = App;\n\nvar _c;\n\n$RefreshReg$(_c, \"App\");","map":{"version":3,"sources":["C:/Users/Senou Lynn/code/projects/chat-app-websocket/webSocketClient/src/App.js"],"names":["React","client","w3cwebsocket","W3CWebSocket","useEffect","useState","useRef","Card","Avatar","Input","Typography","Search","Text","Meta","Home","Login","socketClient","App","isOpen","setIsOpen","userState","setUserState","messages","setMessages","onopen","console","log","onmessage","message","dataFromServer","JSON","parse","data","type","msg","user","incomingMessage","updateMessages","newMessage","push","loginComponent","isLoggedIn","value","userName"],"mappings":"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","sourcesContent":["//Dependencies//\r\nimport React from \"react\";\r\nimport { client, w3cwebsocket as W3CWebSocket } from \"websocket\";\r\nimport { useEffect, useState, useRef } from \"react\";\r\n\r\n//Some bullshit from Ant Designs\r\nimport { Card, Avatar, Input, Typography } from \"antd\";\r\nimport \"antd/dist/antd.css\";\r\nimport \"./index.css\";\r\n\r\nconst { Search } = Input;\r\nconst { Text } = Typography;\r\nconst { Meta } = Card;\r\n\r\n//Components//\r\nimport Home from \"./Home\";\r\nimport Login from \"./Login\";\r\n\r\n//Define socket\r\nconst socketClient = new W3CWebSocket(\"ws://localhost:8000/\");\r\nexport default function App() {\r\n  //Dont' let anything happen until websocket connection is made\r\n  let [isOpen, setIsOpen] = useState(false);\r\n\r\n  //Authentication State\r\n  let [userState, setUserState] = useState({\r\n    \"userName\": \"\",\r\n    \"isLoggedIn\": false,\r\n  });\r\n\r\n  let [messages, setMessages] = useState([])\r\n\r\n  useEffect(() => {\r\n    //Open up connection\r\n    socketClient.onopen = () => {\r\n      console.log(\"Websocket Client Connected\");\r\n      setIsOpen(true);\r\n    };\r\n\r\n    socketClient.onmessage = (message) => {\r\n      const dataFromServer = JSON.parse(message.data);\r\n      console.log(\"Reply from Server: \", dataFromServer);\r\n\r\n      if (dataFromServer.type === \"message\") {\r\n       \r\n          console.log(\"datafromServer msg and user: \",\r\n          dataFromServer.msg, dataFromServer.user\r\n          )\r\n\r\n\r\n          let incomingMessage = {\r\n            \"msg\": dataFromServer.msg,\r\n            \"user\": dataFromServer.user\r\n          }\r\n\r\n         \r\n          updateMessages(incomingMessage)\r\n\r\n         console.log(\" Message State:\", messages)\r\n      }\r\n    };\r\n  });\r\n\r\n  function updateMessages(incomingMessage) {\r\n    let newMessage = messages.push(incomingMessage)\r\n      setMessages(newMessage)\r\n  }\r\n\r\n  //<--- Conditionally Render Components--->//\r\n  let loginComponent;\r\n  userState.isLoggedIn === false\r\n    ? // loginComponent = <Login />\r\n      (loginComponent = (\r\n        <div>\r\n          <Search\r\n            placeholder=\"Enter Username\"\r\n            enterButton=\"Go Forth\"\r\n            size=\"large\"\r\n            onSearch={(value) =>\r\n              setUserState({ userName: value, isLoggedIn: true, messages: [] })\r\n            }\r\n          />\r\n        </div>\r\n      ))\r\n    : (loginComponent = (\r\n        <Home userName={userState.userName} isSocketOpen={isOpen} />\r\n      ));\r\n  return (\r\n    <div>\r\n      <h4>Home</h4>\r\n      {loginComponent}\r\n    </div>\r\n  );\r\n}\r\n"]},"metadata":{},"sourceType":"module"}